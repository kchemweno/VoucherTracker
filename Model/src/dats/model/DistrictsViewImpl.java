package dats.model;

import java.sql.ResultSet;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.client.Configuration;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 17 10:28:14 EAT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DistrictsViewImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public DistrictsViewImpl() {
    }

    /**
     * executeQueryForCollection - for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
        
    public int getDistrictId(String districtName){
        ApplicationModule appMod =null;
        DistrictsViewImpl vo = null;
        int districtId = 0;
        try{
        appMod = Configuration.createRootApplicationModule("dats.model.AppModule", "AppModuleLocal");        
        vo = (DistrictsViewImpl) appMod.findViewObject("DistrictsView1");
        //Create View criteria
        ViewCriteria viewCriteria = vo.createViewCriteria();
        ViewCriteriaRow viewCriteriaRow = viewCriteria.createViewCriteriaRow();
        viewCriteriaRow.setAttribute("Title", districtName);
        viewCriteria.add(viewCriteriaRow);
        viewCriteria.setCriteriaMode(ViewCriteria.CRITERIA_MODE_CACHE);
        vo.applyViewCriteria(viewCriteria);
        vo.executeQuery();        
        while (vo.hasNext()) {
            DistrictsViewRowImpl row = (DistrictsViewRowImpl) vo.next();
            districtId = row.getId();
        }
        }catch(Exception exception){
            System.err.println("Error getting district id in getDistrictId(String districtName) method");
        }finally{
            if(appMod != null){
                Configuration.releaseRootApplicationModule(appMod, false);                      
            }               
        }
        return districtId;        
    }
}

